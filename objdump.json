{
  "Math": {
    "11": {
      "correct": {
        "org-apache-commons-math3-distribution-MultivariateNormalDistributionTest--testDensities.json": [
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "5b427cb6-0666-4d35-8d7a-4aa263453c40",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                -1.5,
                2.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "5b427cb6-0666-4d35-8d7a-4aa263453c40",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 0.09528357207691344,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "b9b3fd71-9274-42fd-8be3-b710c4e4f7f5",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                4.0,
                4.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "b9b3fd71-9274-42fd-8be3-b710c4e4f7f5",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 5.809327101240134e-09,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "271c3de8-ca20-42be-abcf-51db2986b84a",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                1.5,
                -2.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "271c3de8-ca20-42be-abcf-51db2986b84a",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 0.0013874488951732666,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "f313de84-7ba7-40a0-85cd-c5898172cca2",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                0.0,
                0.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "f313de84-7ba7-40a0-85cd-c5898172cca2",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 0.03309922090210542,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          }
        ],
        "org-apache-commons-math3-distribution-MultivariateNormalMixtureModelDistributionTest--testDensities.json": [
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "f769a055-d176-4bea-8b3b-6e1806d4abaa",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                -1.5,
                2.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "f769a055-d176-4bea-8b3b-6e1806d4abaa",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 0.09528357207691344,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "291e31a1-e137-447b-9058-ab2bfe8a85d3",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                -1.5,
                2.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 10.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                4.0,
                8.2
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "291e31a1-e137-447b-9058-ab2bfe8a85d3",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 5.0430237473879635e-05,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 10.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                4.0,
                8.2
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "a1e36a1f-081c-4fcb-ad59-c3fd1394180f",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                4.0,
                8.2
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "a1e36a1f-081c-4fcb-ad59-c3fd1394180f",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 2.804198281670061e-18,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "c52e4d8a-6f20-4d46-8556-2acca10fcdf0",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                4.0,
                8.2
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 10.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                4.0,
                8.2
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "c52e4d8a-6f20-4d46-8556-2acca10fcdf0",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 0.05032921210448704,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 10.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                4.0,
                8.2
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "5c2b29c1-29ee-4c2d-b7e3-d4c43b7ce6d5",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                1.5,
                -2.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "5c2b29c1-29ee-4c2d-b7e3-d4c43b7ce6d5",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 0.0013874488951732666,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "c95f6aae-61c4-4b57-8126-6218ca22cd71",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                1.5,
                -2.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 10.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                4.0,
                8.2
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "c95f6aae-61c4-4b57-8126-6218ca22cd71",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 9.567253981811497e-09,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 10.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                4.0,
                8.2
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "595743b5-1d2d-46b3-9cb5-5a3cb41ed7a3",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                0.0,
                0.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "595743b5-1d2d-46b3-9cb5-5a3cb41ed7a3",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 0.03309922090210542,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 2.79,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5,
                2.0
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "d14a1928-e415-4b71-be1e-1cc4733dbe3f",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                0.0,
                0.0
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 10.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                4.0,
                8.2
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "d14a1928-e415-4b71-be1e-1cc4733dbe3f",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 3.2522300981068783e-06,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 10.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                4.0,
                8.2
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          }
        ],
        "schemas": {
          "org": {
            "apache": {
              "commons": {
                "math3": {
                  "distribution": {
                    "MultivariateNormalDistribution.java": {
                      "double density(double[] vals)": {
                        "entry.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "params": {
                              "properties": {
                                "vals": {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "vals"
                              ],
                              "type": "object"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "self": {
                              "properties": {
                                "covarianceMatrix": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "covarianceMatrixDeterminant": {
                                  "type": "number"
                                },
                                "covarianceMatrixInverse": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "means": {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array"
                                },
                                "samplingMatrix": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "covarianceMatrix",
                                "covarianceMatrixDeterminant",
                                "covarianceMatrixInverse",
                                "means",
                                "samplingMatrix"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "params",
                            "phase",
                            "self"
                          ],
                          "type": "object"
                        },
                        "exit.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "ret": {
                              "type": "number"
                            },
                            "self": {
                              "properties": {
                                "covarianceMatrix": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "covarianceMatrixDeterminant": {
                                  "type": "number"
                                },
                                "covarianceMatrixInverse": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "means": {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array"
                                },
                                "samplingMatrix": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "covarianceMatrix",
                                "covarianceMatrixDeterminant",
                                "covarianceMatrixInverse",
                                "means",
                                "samplingMatrix"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "ret",
                            "self"
                          ],
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "instrumented_methods.json": [
        {
          "code": "/**\n * {@inheritDoc}\n */\npublic double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals);\n}",
          "file": "/tmp/objdump-d4j/math-11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
          "javadoc": {
            "description": "{@inheritDoc}",
            "params": {},
            "returns": null,
            "throws": {}
          },
          "signature": "double density(double[] vals)"
        }
      ],
      "wrong": {
        "org-apache-commons-math3-distribution-MultivariateNormalDistributionTest--testUnivariateDistribution.json": [
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "40886f0d-168c-4d65-8aee-73d4c0d42528",
            "method_signature": "double density(double[] vals)",
            "params": {
              "vals": [
                -3.590009838325309
              ]
            },
            "phase": "entry",
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 1.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
            "id": "40886f0d-168c-4d65-8aee-73d4c0d42528",
            "method_signature": "double density(double[] vals)",
            "phase": "exit",
            "ret": 0.11258232331468764,
            "self": {
              "covarianceMatrix": {
                "serialVersionUID": -1067294169172445528
              },
              "covarianceMatrixDeterminant": 1.0,
              "covarianceMatrixInverse": {
                "serialVersionUID": -1067294169172445528
              },
              "means": [
                -1.5
              ],
              "samplingMatrix": {
                "serialVersionUID": -1067294169172445528
              }
            }
          }
        ],
        "schemas": {
          "org": {
            "apache": {
              "commons": {
                "math3": {
                  "distribution": {
                    "MultivariateNormalDistribution.java": {
                      "double density(double[] vals)": {
                        "entry.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "params": {
                              "properties": {
                                "vals": {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "vals"
                              ],
                              "type": "object"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "self": {
                              "properties": {
                                "covarianceMatrix": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "covarianceMatrixDeterminant": {
                                  "type": "number"
                                },
                                "covarianceMatrixInverse": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "means": {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array"
                                },
                                "samplingMatrix": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "covarianceMatrix",
                                "covarianceMatrixDeterminant",
                                "covarianceMatrixInverse",
                                "means",
                                "samplingMatrix"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "params",
                            "phase",
                            "self"
                          ],
                          "type": "object"
                        },
                        "exit.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "ret": {
                              "type": "number"
                            },
                            "self": {
                              "properties": {
                                "covarianceMatrix": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "covarianceMatrixDeterminant": {
                                  "type": "number"
                                },
                                "covarianceMatrixInverse": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "means": {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array"
                                },
                                "samplingMatrix": {
                                  "properties": {
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "covarianceMatrix",
                                "covarianceMatrixDeterminant",
                                "covarianceMatrixInverse",
                                "means",
                                "samplingMatrix"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "ret",
                            "self"
                          ],
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "12": {
      "instrumented_methods.json": []
    },
    "2": {
      "correct": {
        "org-apache-commons-math3-distribution-HypergeometricDistributionTest--testDegenerateFullSample.json": [
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "8358b426-3f11-4d5d-978e-f4d534482d81",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 3,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 5,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "8358b426-3f11-4d5d-978e-f4d534482d81",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": 3.0,
            "self": {
              "numberOfSuccesses": 3,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 5,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "34d3b113-8063-435b-8011-7d8f3e556069",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 3,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 5,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "34d3b113-8063-435b-8011-7d8f3e556069",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": 3.0,
            "self": {
              "numberOfSuccesses": 3,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 5,
              "serialVersionUID": -436928820673516179
            }
          }
        ],
        "org-apache-commons-math3-distribution-HypergeometricDistributionTest--testDegenerateNoFailures.json": [
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "a75e72b9-7240-48cf-90be-c30b01c806f7",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 5,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 3,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "a75e72b9-7240-48cf-90be-c30b01c806f7",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": 3.0,
            "self": {
              "numberOfSuccesses": 5,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 3,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "509e7b47-4e7c-47d3-8646-7bb6dbf57929",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 5,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 3,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "509e7b47-4e7c-47d3-8646-7bb6dbf57929",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": 3.0,
            "self": {
              "numberOfSuccesses": 5,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 3,
              "serialVersionUID": -436928820673516179
            }
          }
        ],
        "org-apache-commons-math3-distribution-HypergeometricDistributionTest--testDegenerateNoSuccesses.json": [
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "0c6c7307-3aad-46f2-bdbb-81129fca9bbc",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 0,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 3,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "0c6c7307-3aad-46f2-bdbb-81129fca9bbc",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": 0.0,
            "self": {
              "numberOfSuccesses": 0,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 3,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "3bd82aa3-43fe-4cb1-8305-3426a4db5d0e",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 0,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 3,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "3bd82aa3-43fe-4cb1-8305-3426a4db5d0e",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": 0.0,
            "self": {
              "numberOfSuccesses": 0,
              "numericalVariance": 0.0,
              "numericalVarianceIsCalculated": true,
              "populationSize": 5,
              "sampleSize": 3,
              "serialVersionUID": -436928820673516179
            }
          }
        ],
        "org-apache-commons-math3-distribution-HypergeometricDistributionTest--testMoments.json": [
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "48be6ea1-5e22-4f07-9497-2e322baa651d",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 40,
              "numericalVariance": 2.424134608257357,
              "numericalVarianceIsCalculated": true,
              "populationSize": 1500,
              "sampleSize": 100,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "48be6ea1-5e22-4f07-9497-2e322baa651d",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": 2.6666666666666665,
            "self": {
              "numberOfSuccesses": 40,
              "numericalVariance": 2.424134608257357,
              "numericalVarianceIsCalculated": true,
              "populationSize": 1500,
              "sampleSize": 100,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "10d5d126-4064-4f47-a2ea-82c2073c732e",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 55,
              "numericalVarianceIsCalculated": false,
              "populationSize": 3000,
              "sampleSize": 200,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "10d5d126-4064-4f47-a2ea-82c2073c732e",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": 3.6666666666666665,
            "self": {
              "numberOfSuccesses": 55,
              "numericalVarianceIsCalculated": false,
              "populationSize": 3000,
              "sampleSize": 200,
              "serialVersionUID": -436928820673516179
            }
          }
        ],
        "schemas": {
          "org": {
            "apache": {
              "commons": {
                "math3": {
                  "distribution": {
                    "HypergeometricDistribution.java": {
                      "double getNumericalMean()": {
                        "entry.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "self": {
                              "properties": {
                                "numberOfSuccesses": {
                                  "type": "integer"
                                },
                                "numericalVariance": {
                                  "type": "number"
                                },
                                "numericalVarianceIsCalculated": {
                                  "type": "boolean"
                                },
                                "populationSize": {
                                  "type": "integer"
                                },
                                "sampleSize": {
                                  "type": "integer"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "numberOfSuccesses",
                                "numericalVarianceIsCalculated",
                                "populationSize",
                                "sampleSize",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "self"
                          ],
                          "type": "object"
                        },
                        "exit.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "ret": {
                              "type": "number"
                            },
                            "self": {
                              "properties": {
                                "numberOfSuccesses": {
                                  "type": "integer"
                                },
                                "numericalVariance": {
                                  "type": "number"
                                },
                                "numericalVarianceIsCalculated": {
                                  "type": "boolean"
                                },
                                "populationSize": {
                                  "type": "integer"
                                },
                                "sampleSize": {
                                  "type": "integer"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "numberOfSuccesses",
                                "numericalVarianceIsCalculated",
                                "populationSize",
                                "sampleSize",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "ret",
                            "self"
                          ],
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "instrumented_methods.json": [
        {
          "code": "/**\n * {@inheritDoc}\n *\n * For population size {@code N}, number of successes {@code m}, and sample\n * size {@code n}, the mean is {@code n * m / N}.\n */\npublic double getNumericalMean() {\n    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n}",
          "file": "/tmp/objdump-d4j/math-2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
          "javadoc": {
            "description": "{@inheritDoc}\n\nFor population size {@code  N}, number of successes {@code  m}, and sample\nsize {@code  n}, the mean is {@code  n * m / N}.",
            "params": {},
            "returns": null,
            "throws": {}
          },
          "signature": "double getNumericalMean()"
        }
      ],
      "wrong": {
        "org-apache-commons-math3-distribution-HypergeometricDistributionTest--testMath1021.json": [
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "79963cf6-ae5e-4a1c-bdc5-0f8014aacefc",
            "method_signature": "double getNumericalMean()",
            "phase": "entry",
            "self": {
              "numberOfSuccesses": 42976365,
              "numericalVarianceIsCalculated": false,
              "populationSize": 43130568,
              "sampleSize": 50,
              "serialVersionUID": -436928820673516179
            }
          },
          {
            "file_path": "org/apache/commons/math3/distribution/HypergeometricDistribution.java",
            "id": "79963cf6-ae5e-4a1c-bdc5-0f8014aacefc",
            "method_signature": "double getNumericalMean()",
            "phase": "exit",
            "ret": -49.759350398538686,
            "self": {
              "numberOfSuccesses": 42976365,
              "numericalVarianceIsCalculated": false,
              "populationSize": 43130568,
              "sampleSize": 50,
              "serialVersionUID": -436928820673516179
            }
          }
        ],
        "schemas": {
          "org": {
            "apache": {
              "commons": {
                "math3": {
                  "distribution": {
                    "HypergeometricDistribution.java": {
                      "double getNumericalMean()": {
                        "entry.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "self": {
                              "properties": {
                                "numberOfSuccesses": {
                                  "type": "integer"
                                },
                                "numericalVarianceIsCalculated": {
                                  "type": "boolean"
                                },
                                "populationSize": {
                                  "type": "integer"
                                },
                                "sampleSize": {
                                  "type": "integer"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "numberOfSuccesses",
                                "numericalVarianceIsCalculated",
                                "populationSize",
                                "sampleSize",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "self"
                          ],
                          "type": "object"
                        },
                        "exit.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "ret": {
                              "type": "number"
                            },
                            "self": {
                              "properties": {
                                "numberOfSuccesses": {
                                  "type": "integer"
                                },
                                "numericalVarianceIsCalculated": {
                                  "type": "boolean"
                                },
                                "populationSize": {
                                  "type": "integer"
                                },
                                "sampleSize": {
                                  "type": "integer"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "numberOfSuccesses",
                                "numericalVarianceIsCalculated",
                                "populationSize",
                                "sampleSize",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "ret",
                            "self"
                          ],
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "5": {
      "correct": {
        "org-apache-commons-math3-complex-ComplexTest--testReciprocal.json": [
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "9ea7d6e3-b8b8-485d-b85d-9780e7d35f6b",
            "method_signature": "Complex reciprocal()",
            "phase": "entry",
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 6.0,
              "isInfinite": false,
              "isNaN": false,
              "real": 5.0,
              "serialVersionUID": -6195664516687396620
            }
          },
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "9ea7d6e3-b8b8-485d-b85d-9780e7d35f6b",
            "method_signature": "Complex reciprocal()",
            "phase": "exit",
            "ret": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": -0.0983606557377049,
              "isInfinite": false,
              "isNaN": false,
              "real": 0.08196721311475409,
              "serialVersionUID": -6195664516687396620
            },
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 6.0,
              "isInfinite": false,
              "isNaN": false,
              "real": 5.0,
              "serialVersionUID": -6195664516687396620
            }
          }
        ],
        "org-apache-commons-math3-complex-ComplexTest--testReciprocalImaginary.json": [
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "1c468095-5b61-4fc0-a6e9-564bebd767ed",
            "method_signature": "Complex reciprocal()",
            "phase": "entry",
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": -2.0,
              "isInfinite": false,
              "isNaN": false,
              "real": 0.0,
              "serialVersionUID": -6195664516687396620
            }
          },
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "1c468095-5b61-4fc0-a6e9-564bebd767ed",
            "method_signature": "Complex reciprocal()",
            "phase": "exit",
            "ret": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 0.5,
              "isInfinite": false,
              "isNaN": false,
              "real": 0.0,
              "serialVersionUID": -6195664516687396620
            },
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": -2.0,
              "isInfinite": false,
              "isNaN": false,
              "real": 0.0,
              "serialVersionUID": -6195664516687396620
            }
          }
        ],
        "org-apache-commons-math3-complex-ComplexTest--testReciprocalInf.json": [
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "9268f992-5dd9-4a58-b69e-9bb565ac66c1",
            "method_signature": "Complex reciprocal()",
            "phase": "entry",
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "isInfinite": true,
              "isNaN": false,
              "serialVersionUID": -6195664516687396620
            }
          },
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "9268f992-5dd9-4a58-b69e-9bb565ac66c1",
            "method_signature": "Complex reciprocal()",
            "phase": "exit",
            "ret": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 0.0,
              "isInfinite": false,
              "isNaN": false,
              "real": 0.0,
              "serialVersionUID": -6195664516687396620
            },
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "isInfinite": true,
              "isNaN": false,
              "serialVersionUID": -6195664516687396620
            }
          },
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "6d30bc41-96ef-42c5-a3ed-33432ad0f525",
            "method_signature": "Complex reciprocal()",
            "phase": "entry",
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "isInfinite": true,
              "isNaN": false,
              "real": 1.0,
              "serialVersionUID": -6195664516687396620
            }
          },
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "6d30bc41-96ef-42c5-a3ed-33432ad0f525",
            "method_signature": "Complex reciprocal()",
            "phase": "exit",
            "ret": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 0.0,
              "isInfinite": false,
              "isNaN": false,
              "real": 0.0,
              "serialVersionUID": -6195664516687396620
            },
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "isInfinite": true,
              "isNaN": false,
              "real": 1.0,
              "serialVersionUID": -6195664516687396620
            }
          }
        ],
        "org-apache-commons-math3-complex-ComplexTest--testReciprocalNaN.json": [
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "26222eee-8b95-43fc-90fa-57d64f88fb90",
            "method_signature": "Complex reciprocal()",
            "phase": "entry",
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "isInfinite": false,
              "isNaN": true,
              "serialVersionUID": -6195664516687396620
            }
          },
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "26222eee-8b95-43fc-90fa-57d64f88fb90",
            "method_signature": "Complex reciprocal()",
            "phase": "exit",
            "ret": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "isInfinite": false,
              "isNaN": true,
              "serialVersionUID": -6195664516687396620
            },
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "isInfinite": false,
              "isNaN": true,
              "serialVersionUID": -6195664516687396620
            }
          }
        ],
        "org-apache-commons-math3-complex-ComplexTest--testReciprocalReal.json": [
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "797f8574-6bd4-4ce5-9cac-a588b725a2f8",
            "method_signature": "Complex reciprocal()",
            "phase": "entry",
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 0.0,
              "isInfinite": false,
              "isNaN": false,
              "real": -2.0,
              "serialVersionUID": -6195664516687396620
            }
          },
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "797f8574-6bd4-4ce5-9cac-a588b725a2f8",
            "method_signature": "Complex reciprocal()",
            "phase": "exit",
            "ret": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": -0.0,
              "isInfinite": false,
              "isNaN": false,
              "real": -0.5,
              "serialVersionUID": -6195664516687396620
            },
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 0.0,
              "isInfinite": false,
              "isNaN": false,
              "real": -2.0,
              "serialVersionUID": -6195664516687396620
            }
          }
        ],
        "schemas": {
          "org": {
            "apache": {
              "commons": {
                "math3": {
                  "complex": {
                    "Complex.java": {
                      "Complex reciprocal()": {
                        "entry.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "self": {
                              "properties": {
                                "I": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "INF": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "NaN": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ONE": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ZERO": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "imaginary": {
                                  "type": "number"
                                },
                                "isInfinite": {
                                  "type": "boolean"
                                },
                                "isNaN": {
                                  "type": "boolean"
                                },
                                "real": {
                                  "type": "number"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "I",
                                "INF",
                                "NaN",
                                "ONE",
                                "ZERO",
                                "isInfinite",
                                "isNaN",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "self"
                          ],
                          "type": "object"
                        },
                        "exit.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "ret": {
                              "properties": {
                                "I": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "INF": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "NaN": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ONE": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ZERO": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "imaginary": {
                                  "type": "number"
                                },
                                "isInfinite": {
                                  "type": "boolean"
                                },
                                "isNaN": {
                                  "type": "boolean"
                                },
                                "real": {
                                  "type": "number"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "I",
                                "INF",
                                "NaN",
                                "ONE",
                                "ZERO",
                                "isInfinite",
                                "isNaN",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            },
                            "self": {
                              "properties": {
                                "I": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "INF": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "NaN": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ONE": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ZERO": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "imaginary": {
                                  "type": "number"
                                },
                                "isInfinite": {
                                  "type": "boolean"
                                },
                                "isNaN": {
                                  "type": "boolean"
                                },
                                "real": {
                                  "type": "number"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "I",
                                "INF",
                                "NaN",
                                "ONE",
                                "ZERO",
                                "isInfinite",
                                "isNaN",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "ret",
                            "self"
                          ],
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "instrumented_methods.json": [
        {
          "code": "/**\n * {@inheritDoc}\n */\npublic Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n        return NaN;\n    }\n    if (isInfinite) {\n        return ZERO;\n    }\n    if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n        double q = real / imaginary;\n        double scale = 1. / (real * q + imaginary);\n        return createComplex(scale * q, -scale);\n    } else {\n        double q = imaginary / real;\n        double scale = 1. / (imaginary * q + real);\n        return createComplex(scale, -scale * q);\n    }\n}",
          "file": "/tmp/objdump-d4j/math-5/src/main/java/org/apache/commons/math3/complex/Complex.java",
          "javadoc": {
            "description": "{@inheritDoc}",
            "params": {},
            "returns": null,
            "throws": {}
          },
          "signature": "Complex reciprocal()"
        }
      ],
      "wrong": {
        "org-apache-commons-math3-complex-ComplexTest--testReciprocalZero.json": [
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "4b0b9548-db08-43da-997e-3bb8a41ab5b7",
            "method_signature": "Complex reciprocal()",
            "phase": "entry",
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 0.0,
              "isInfinite": false,
              "isNaN": false,
              "real": 0.0,
              "serialVersionUID": -6195664516687396620
            }
          },
          {
            "file_path": "org/apache/commons/math3/complex/Complex.java",
            "id": "4b0b9548-db08-43da-997e-3bb8a41ab5b7",
            "method_signature": "Complex reciprocal()",
            "phase": "exit",
            "ret": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "isInfinite": false,
              "isNaN": true,
              "serialVersionUID": -6195664516687396620
            },
            "self": {
              "I": {
                "imaginary": 1.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "INF": {
                "isInfinite": true,
                "isNaN": false,
                "serialVersionUID": -6195664516687396620
              },
              "NaN": {
                "isInfinite": false,
                "isNaN": true,
                "serialVersionUID": -6195664516687396620
              },
              "ONE": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 1.0,
                "serialVersionUID": -6195664516687396620
              },
              "ZERO": {
                "imaginary": 0.0,
                "isInfinite": false,
                "isNaN": false,
                "real": 0.0,
                "serialVersionUID": -6195664516687396620
              },
              "imaginary": 0.0,
              "isInfinite": false,
              "isNaN": false,
              "real": 0.0,
              "serialVersionUID": -6195664516687396620
            }
          }
        ],
        "schemas": {
          "org": {
            "apache": {
              "commons": {
                "math3": {
                  "complex": {
                    "Complex.java": {
                      "Complex reciprocal()": {
                        "entry.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "self": {
                              "properties": {
                                "I": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "INF": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "NaN": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ONE": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ZERO": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "imaginary": {
                                  "type": "number"
                                },
                                "isInfinite": {
                                  "type": "boolean"
                                },
                                "isNaN": {
                                  "type": "boolean"
                                },
                                "real": {
                                  "type": "number"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "I",
                                "INF",
                                "NaN",
                                "ONE",
                                "ZERO",
                                "imaginary",
                                "isInfinite",
                                "isNaN",
                                "real",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "self"
                          ],
                          "type": "object"
                        },
                        "exit.schema.json": {
                          "$schema": "http://json-schema.org/schema#",
                          "properties": {
                            "file_path": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "method_signature": {
                              "type": "string"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "ret": {
                              "properties": {
                                "I": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "INF": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "NaN": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ONE": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ZERO": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "isInfinite": {
                                  "type": "boolean"
                                },
                                "isNaN": {
                                  "type": "boolean"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "I",
                                "INF",
                                "NaN",
                                "ONE",
                                "ZERO",
                                "isInfinite",
                                "isNaN",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            },
                            "self": {
                              "properties": {
                                "I": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "INF": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "NaN": {
                                  "properties": {
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "isInfinite",
                                    "isNaN",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ONE": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "ZERO": {
                                  "properties": {
                                    "imaginary": {
                                      "type": "number"
                                    },
                                    "isInfinite": {
                                      "type": "boolean"
                                    },
                                    "isNaN": {
                                      "type": "boolean"
                                    },
                                    "real": {
                                      "type": "number"
                                    },
                                    "serialVersionUID": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "imaginary",
                                    "isInfinite",
                                    "isNaN",
                                    "real",
                                    "serialVersionUID"
                                  ],
                                  "type": "object"
                                },
                                "imaginary": {
                                  "type": "number"
                                },
                                "isInfinite": {
                                  "type": "boolean"
                                },
                                "isNaN": {
                                  "type": "boolean"
                                },
                                "real": {
                                  "type": "number"
                                },
                                "serialVersionUID": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "I",
                                "INF",
                                "NaN",
                                "ONE",
                                "ZERO",
                                "imaginary",
                                "isInfinite",
                                "isNaN",
                                "real",
                                "serialVersionUID"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "file_path",
                            "id",
                            "method_signature",
                            "phase",
                            "ret",
                            "self"
                          ],
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "9": {
      "instrumented_methods.json": [
        {
          "code": "/**\n * Get a line with reversed direction.\n * @return a new instance, with reversed direction\n */\npublic Line revert() {\n    final Line reverted = new Line(zero, zero.subtract(direction));\n    return reverted;\n}",
          "file": "/tmp/objdump-d4j/math-9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
          "javadoc": {
            "description": "Get a line with reversed direction.",
            "params": {},
            "returns": "a new instance, with reversed direction",
            "throws": {}
          },
          "signature": "Line revert()"
        }
      ],
      "wrong": {
        "org-apache-commons-math3-geometry-euclidean-threed-LineTest--testRevert.json": [
          {
            "file_path": "org/apache/commons/math3/geometry/euclidean/threed/Line.java",
            "id": "b4f699f8-9127-4402-8427-bf111386f90e",
            "method_signature": "Line revert()",
            "phase": "entry",
            "self": {
              "direction": {
                "serialVersionUID": 1313493323784566947,
                "x": -0.028581782127907646,
                "y": -0.10666866307220428,
                "z": -0.9938837346736192
              },
              "zero": {
                "serialVersionUID": 1313493323784566947,
                "x": 1630626.2904207122,
                "y": 6085580.16400767,
                "z": -700028.4653081102
              }
            }
          },
          {
            "file_path": "org/apache/commons/math3/geometry/euclidean/threed/Line.java",
            "id": "b4f699f8-9127-4402-8427-bf111386f90e",
            "method_signature": "Line revert()",
            "phase": "exit",
            "ret": {
              "direction": {
                "serialVersionUID": 1313493323784566947,
                "x": 0.028581782243293483,
                "y": 0.1066686632079857,
                "z": 0.9938837346557284
              },
              "zero": {
                "serialVersionUID": 1313493323784566947,
                "x": 1630626.2903913592,
                "y": 6085580.163898123,
                "z": -700028.4663288131
              }
            },
            "self": {
              "direction": {
                "serialVersionUID": 1313493323784566947,
                "x": -0.028581782127907646,
                "y": -0.10666866307220428,
                "z": -0.9938837346736192
              },
              "zero": {
                "serialVersionUID": 1313493323784566947,
                "x": 1630626.2904207122,
                "y": 6085580.16400767,
                "z": -700028.4653081102
              }
            }
          }
        ],
        "schemas": {
          "org": {
            "apache": {
              "commons": {
                "math3": {
                  "geometry": {
                    "euclidean": {
                      "threed": {
                        "Line.java": {
                          "Line revert()": {
                            "entry.schema.json": {
                              "$schema": "http://json-schema.org/schema#",
                              "properties": {
                                "file_path": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "method_signature": {
                                  "type": "string"
                                },
                                "phase": {
                                  "type": "string"
                                },
                                "self": {
                                  "properties": {
                                    "direction": {
                                      "properties": {
                                        "serialVersionUID": {
                                          "type": "integer"
                                        },
                                        "x": {
                                          "type": "number"
                                        },
                                        "y": {
                                          "type": "number"
                                        },
                                        "z": {
                                          "type": "number"
                                        }
                                      },
                                      "required": [
                                        "serialVersionUID",
                                        "x",
                                        "y",
                                        "z"
                                      ],
                                      "type": "object"
                                    },
                                    "zero": {
                                      "properties": {
                                        "serialVersionUID": {
                                          "type": "integer"
                                        },
                                        "x": {
                                          "type": "number"
                                        },
                                        "y": {
                                          "type": "number"
                                        },
                                        "z": {
                                          "type": "number"
                                        }
                                      },
                                      "required": [
                                        "serialVersionUID",
                                        "x",
                                        "y",
                                        "z"
                                      ],
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "direction",
                                    "zero"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "file_path",
                                "id",
                                "method_signature",
                                "phase",
                                "self"
                              ],
                              "type": "object"
                            },
                            "exit.schema.json": {
                              "$schema": "http://json-schema.org/schema#",
                              "properties": {
                                "file_path": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "method_signature": {
                                  "type": "string"
                                },
                                "phase": {
                                  "type": "string"
                                },
                                "ret": {
                                  "properties": {
                                    "direction": {
                                      "properties": {
                                        "serialVersionUID": {
                                          "type": "integer"
                                        },
                                        "x": {
                                          "type": "number"
                                        },
                                        "y": {
                                          "type": "number"
                                        },
                                        "z": {
                                          "type": "number"
                                        }
                                      },
                                      "required": [
                                        "serialVersionUID",
                                        "x",
                                        "y",
                                        "z"
                                      ],
                                      "type": "object"
                                    },
                                    "zero": {
                                      "properties": {
                                        "serialVersionUID": {
                                          "type": "integer"
                                        },
                                        "x": {
                                          "type": "number"
                                        },
                                        "y": {
                                          "type": "number"
                                        },
                                        "z": {
                                          "type": "number"
                                        }
                                      },
                                      "required": [
                                        "serialVersionUID",
                                        "x",
                                        "y",
                                        "z"
                                      ],
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "direction",
                                    "zero"
                                  ],
                                  "type": "object"
                                },
                                "self": {
                                  "properties": {
                                    "direction": {
                                      "properties": {
                                        "serialVersionUID": {
                                          "type": "integer"
                                        },
                                        "x": {
                                          "type": "number"
                                        },
                                        "y": {
                                          "type": "number"
                                        },
                                        "z": {
                                          "type": "number"
                                        }
                                      },
                                      "required": [
                                        "serialVersionUID",
                                        "x",
                                        "y",
                                        "z"
                                      ],
                                      "type": "object"
                                    },
                                    "zero": {
                                      "properties": {
                                        "serialVersionUID": {
                                          "type": "integer"
                                        },
                                        "x": {
                                          "type": "number"
                                        },
                                        "y": {
                                          "type": "number"
                                        },
                                        "z": {
                                          "type": "number"
                                        }
                                      },
                                      "required": [
                                        "serialVersionUID",
                                        "x",
                                        "y",
                                        "z"
                                      ],
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "direction",
                                    "zero"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "file_path",
                                "id",
                                "method_signature",
                                "phase",
                                "ret",
                                "self"
                              ],
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}